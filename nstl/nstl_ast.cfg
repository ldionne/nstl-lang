
#A class representing a nstl program as a sequence of definitions.
#   defs    The sequence of definitions forming the nstl program.
Program: [defs**]


#A class representing a namespace.
#   name        The name of the namespace.
#   members     A list of the members defined inside the namespace. The
#                   members are listed in their order of appearance.
Namespace: [name*, members**]


#A class representing a template.
#   name        The name of the template.
#   params      A list of Parameters that the template accepts.
#   contents    A list of statements and expressions defining the template.
Template: [name*, params**, contents**]


#A class representing an 'import' statement.
#   templates   The templates to instantiate.
Import: [templates**]


#A class representing a template parameter.
#   keyword     The ParameterId that is the name of the parameter.
#   default     The default value of the parameter, or None.
Parameter: [keyword*, default*]


#A class representing a parameter identifier.
#   name        The name part of the identifier.
#   params      A list of parameters that the identifier takes, or None.
#                   This is because Parameters are really just C macros,
#                   and function-like macros do take parameters. It is
#                   useful whenever the full C macro definition must be
#                   be known :
#                   #define CAT_EXAMPLE(a, b) a ## b
#                           ----------- ^  ^
#                             .name   .params
ParameterId: [name, params]


#A class representing any raw input inside a nstl program. Raw input
#   is any input contained between the rawbegin and rawend tokens.
#   input       The raw text that was inputed.
Raw: [input]


#outer.inner
ScopeOp: [outer*, inner*]


#A class representing an usage of the '( )' call operator.
#   name        The name of the template being called.
#   args        A list of arguments for the call.
CallOp: [name*, args**]


#A class representing an argument during a call.
#   value       The value of the argument.
#   keyword     The name of the parameter that this argument should fill, or None
Argument: [value*, keyword*]

Identifier: [name]
