
#defs   A list of definitions forming the nstl program.
Program: [defs**]


#name       The name of the namespace.
#members    A list of definitions inside the namespace, in order of appearance.
Namespace: [name*, members**]


#name       The name of the template.
#params     A list of parameters that the template accepts.
#body       A list of statements and expressions defining the template.
Template: [name*, params**, body**]


#import template1, template2, ...
#templates  A comma separated list of templates to import
Import: [templates**]


#keyword    A special parameter identifier that is the name of the parameter.
#default    The default argument to the parameter.
Parameter: [keyword*, default*]


#name        The name part of the identifier.
#params      A list of parameters that the identifier takes.
#                This is because Parameters are really just C macros,
#                and function-like macros do take parameters. It is
#                useful whenever the full C macro definition must be
#                be known :
#                #define CAT_EXAMPLE(a, b) a ## b
#                        ----------- ^  ^
#                          .name   .params
ParameterId: [name, params]


#A class representing any raw input inside a nstl program. Raw input
#   is any input contained between the rawbegin and rawend tokens.
#   input       The raw text that was inputed.
Raw: [input]


#outer.inner
#outer  An expression representing the outer namespace.
#inner  An identifier representing a name inside that namespace.
ScopeOp: [outer*, inner*]


#name(arg1, arg2, ...)
#name   An expression representing the template to call.
#args   A list of arguments for the call.
CallOp: [name*, args**]


#value      The value of the argument.
#keyword    The name of the parameter that this argument fills.
Argument: [value*, keyword*]


Identifier: [name]
